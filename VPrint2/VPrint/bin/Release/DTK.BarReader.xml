<?xml version="1.0"?>
<doc>
    <assembly>
        "DTK.BarReader"
    </assembly>
    <members>
        <member name="M:DTKBarReader.BarcodeReader.GetExtraParam(System.String)">
            <summary>
Gets the value of the extra parameter.
</summary>
            <param name="paramName">The name of parameter</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.SetExtraParam(System.String,System.Int32)">
            <summary>
Sets the value of the extra parameter.
</summary>
            <param name="paramName">The name of parameter</param>
            <param name="paramValue">The new value of parameter</param>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ThresholdStep">
            <summary>
The step of the threshold value for the 'Multiple' threshold mode. 
</summary>
            <remarks>
Threshold related parameters: ThresholdMode, Threshold, ThresholdStep, ThresholdCount. 
The threshold value is used to distinguish a foreground and background pixels (black and white information) 
in color or gray-scale images. The possible values of the threshold are 0..255. Each pixel on color or gray image 
have an intensity from 0 (black) to 255 (white). Defining the threshold value 128 (default) the pixels with intensity less than 128 
will be considered as black (foreground) pixels, and the pixels with intensity greater than 128 - as white (background) pixels.<br /><br />
The threshold parameters are ignored for binary (black and white) images.<br /><br />
1) ThresholdMode = TM_Automatic<br />
The threshold is detected automatically by using adaptive global threshold algorithm. The threshold will be detected for each image (page).<br />
The Threshold, ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
2) ThresholdMode = TM_Fixed<br />
The parameter Threshold will be used only. The value defined by Threshold parameter will be used.<br />
The ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
3) ThresholdMode = TM_Multiple<br />
The different threshold values will be used in this mode. The value defined in Threshold parameter will be mean value.<br /><br />
Example:<br />
Threshold = 100<br />
ThresholdCount = 6<br />
ThresholdStep = 10<br />
The following threshold values will be used (in that order): 100, 90, 110, 80, 120, 70, 130 <br /></remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ThresholdMode">
            <summary>
Gets or sets a value indicating the image thresholding mode. 
</summary>
            <remarks>
Threshold related parameters: ThresholdMode, Threshold, ThresholdStep, ThresholdCount. 
The threshold value is used to distinguish a foreground and background pixels (black and white information) 
in color or gray-scale images. The possible values of the threshold are 0..255. Each pixel on color or gray image 
have an intensity from 0 (black) to 255 (white). Defining the threshold value 128 (default) the pixels with intensity less than 128 
will be considered as black (foreground) pixels, and the pixels with intensity greater than 128 - as white (background) pixels.<br /><br />
The threshold parameters are ignored for binary (black and white) images.<br /><br />
1) ThresholdMode = TM_Automatic<br />
The threshold is detected automatically by using adaptive global threshold algorithm. The threshold will be detected for each image (page).<br />
The Threshold, ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
2) ThresholdMode = TM_Fixed<br />
The parameter Threshold will be used only. The value defined by Threshold parameter will be used.<br />
The ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
3) ThresholdMode = TM_Multiple<br />
The different threshold values will be used in this mode. The value defined in Threshold parameter will be mean value.<br /><br />
Example:<br />
Threshold = 100<br />
ThresholdCount = 6<br />
ThresholdStep = 10<br />
The following threshold values will be used (in that order): 100, 90, 110, 80, 120, 70, 130 <br /></remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ThresholdCount">
            <summary>
The number of the threshold values for the 'Multiple' threshold mode. 
</summary>
            <remarks>
Threshold related parameters: ThresholdMode, Threshold, ThresholdStep, ThresholdCount. 
The threshold value is used to distinguish a foreground and background pixels (black and white information) 
in color or gray-scale images. The possible values of the threshold are 0..255. Each pixel on color or gray image 
have an intensity from 0 (black) to 255 (white). Defining the threshold value 128 (default) the pixels with intensity less than 128 
will be considered as black (foreground) pixels, and the pixels with intensity greater than 128 - as white (background) pixels.<br /><br />
The threshold parameters are ignored for binary (black and white) images.<br /><br />
1) ThresholdMode = TM_Automatic<br />
The threshold is detected automatically by using adaptive global threshold algorithm. The threshold will be detected for each image (page).<br />
The Threshold, ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
2) ThresholdMode = TM_Fixed<br />
The parameter Threshold will be used only. The value defined by Threshold parameter will be used.<br />
The ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
3) ThresholdMode = TM_Multiple<br />
The different threshold values will be used in this mode. The value defined in Threshold parameter will be mean value.<br /><br />
Example:<br />
Threshold = 100<br />
ThresholdCount = 6<br />
ThresholdStep = 10<br />
The following threshold values will be used (in that order): 100, 90, 110, 80, 120, 70, 130 <br /></remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Threshold">
            <summary>
The color threshold level for distinguishing of the background and foreground pixels. 
</summary>
            <remarks>
Threshold related parameters: ThresholdMode, Threshold, ThresholdStep, ThresholdCount. 
The threshold value is used to distinguish a foreground and background pixels (black and white information) 
in color or gray-scale images. The possible values of the threshold are 0..255. Each pixel on color or gray image 
have an intensity from 0 (black) to 255 (white). Defining the threshold value 128 (default) the pixels with intensity less than 128 
will be considered as black (foreground) pixels, and the pixels with intensity greater than 128 - as white (background) pixels.<br /><br />
The threshold parameters are ignored for binary (black and white) images.<br /><br />
1) ThresholdMode = TM_Automatic<br />
The threshold is detected automatically by using adaptive global threshold algorithm. The threshold will be detected for each image (page).<br />
The Threshold, ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
2) ThresholdMode = TM_Fixed<br />
The parameter Threshold will be used only. The value defined by Threshold parameter will be used.<br />
The ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
3) ThresholdMode = TM_Multiple<br />
The different threshold values will be used in this mode. The value defined in Threshold parameter will be mean value.<br /><br />
Example:<br />
Threshold = 100<br />
ThresholdCount = 6<br />
ThresholdStep = 10<br />
The following threshold values will be used (in that order): 100, 90, 110, 80, 120, 70, 130 <br /></remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ScanPage">
            <summary>
The page number for barcode recognition (for multipage images only). 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ScanInterval">
            <summary>
The scanning interval for recognition (in pixels). Possible values are from 1 to 10.
</summary>
            <remarks>
A value of 1 means scan every pixel row or column of the image will be scanned; value 2 means scan every second row or column, and so on. Increasing the value of this parameter may result in faster reading of the image, but increases the probability of not detecting narrow or poorly formed barcodes. Decreasing the value of this parameter can have the opposite effect: slower reading of the image but better barcode detection.
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.QuietZoneSize">
            <summary>
Gets or sets the expected size of the 'quiet zone' of the barcode. 
</summary>
            <remarks>
Quiet zone - In barcode technology, a quiet zone is the blank margin on either side of a bar code that's used to tell the barcode reader where a barcode's symbology starts and stops. The purpose of a quiet zone is to prevent the reader from picking up information that does not pertain to the bar code that is being scanned. (The blank margin will not send a scanning signal, hence the name "quiet".) As a rule, the quiet zone should be ten times the dimension of the narrowest element in the bar code.An undersize quiet zone may render a bar code unreadable, or readable only in one direction.<br /><br />
The possible values of the QuietZoneSize parameter are: QZ_ExtraSmall, QZ_Small, QZ_Normal, QZ_Large.<br /><br />
The Normal size of the quiet zone is a standard quiet zone, as it defined by specification (approximately ten times greater than the narrowest element in the barcode). The other parameters Large, Small and VerySmall should be used if the quiet zone is abnormal, for example less than defined in specification. For example, the barcode can be printed in table or some graphical object on image can be near the barcode, in this case the barcode will not be detected using default (Normal) parameter, and you should use Small value, or VerySmall for extra small quiet zone. Defining Small or VerySmall can increase the recognition speed and can produce more errors in recognition. The Large parameter, vice versa increases the performance and stability, but may not detect some barcodes with standard (Normal) quiet zone. This Large parameter can be used if you exactly know that the quiet zones are large, for example a barcode is located on the bottom of the page and no information exists on left an right side of barcode. 
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.PDFRenderDPI">
            <summary>
The parameter defines DPI (dot per inch) for PDF files rendering. 
</summary>
            <remarks>
Used when the PDFReadingType is PDF_Render 
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.PDFReadingType">
            <summary>
Gets or sets the type of the PDF documents reading. 
</summary>
            <remarks>
The following types are available.<br /><br />
1) PDF_Render<br />
In this case the page of the PDF document will be rendered to single image with defined DPI (property PDFRenderDPI). If the PDF page contain the different objects, like text, graphics, images, etc., then all objects will be rendered to single bitmap image (like you can see this page in PDF viewer).<br /><br />
2) PDF_Images<br />
All image objects located on PDF page will be extracted and barcode recognition will be executed on each image separately. The other non-image objects like text will be ignored. The barcode can be created as text object using the barcode font, and using the PDF_Images option this barcode will not be recognized, since only the image objects will be considered. <br /></remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ImageSharp">
            <summary>
Specifies whether the sharpening operation must be executed before recognition. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ImageInvert">
            <summary>
Specifies whether the image inversion is required before recognition. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ImageErode">
            <summary>
Specifies whether the morphological operation 'Erosion' must be executed before recognition. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ImageDilate">
            <summary>
Specifies whether the morphological operation 'Dilation' must be executed before recognition. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ImageDespeckle">
            <summary>
Specifies whether the morphological operation Despeckle must be executed before recognition.
</summary>
            <remarks>
The Despeckle pre-processing operation performs the clearing of the noisy image, removes small dots and holed (salt and paper), reduce noise. This operation can be used for noisy images to increase the recognition rate.
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.I2of5Checksum">
            <summary>
Specifies whether the checksum validation is required for 2of5 Interleaved barcodes. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Code93Checksum">
            <summary>
Specifies whether the checksum validation is required for Code 93 barcodes. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Code39Checksum">
            <summary>
Specifies whether the checksum validation is required for Code 39 barcodes. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Code11Checksum">
            <summary>
Specifies whether the checksum validation is required for Code 11 barcodes. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.BarcodeTypes">
            <summary>
The barcode types defined for recognition.
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Version">
            <summary>
The version number of library
</summary>
            <remarks />
        </member>
        <member name="P:DTKBarReader.BarcodeReader.BarcodesToRead">
            <summary>
The number of expected barcodes. 
</summary>
            <remarks>
This parameter defines the expected barcodes count on image (page). The number of detected barcodes can be greater then this value. If the expected number of barcodes was not reached, the the barcode reader try to find this number of barcodes using additional advanced methods.<br /><br />
For multiple-page TIFF images, this parameter is related to single page only, not for all pages.
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.Barcodes">
            <summary>
The collection of the detected barcodes, produced by the one of the ReadFrom... functions. 
</summary>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.BarcodeOrientation">
            <summary>
Gets or sets the expected orientation of the barcode.
</summary>
            <remarks>
The barcode reader can detect barcodes at any orientation or placement, although if you know that all barcodes will be oriented in a particular way, this can be used to speed up the recognition process. For example, if you define orientation LetfToRight only, this mean that barcodes with horizontal orientation (in left-right direction) in angle +/- 45 degree can be detected. 
</remarks>
        </member>
        <member name="P:DTKBarReader.BarcodeReader.ScanRectangle">
            <summary>
Gets or sets scanning rectangle for barcode recognition. 
</summary>
            <remarks>
The ScanRectangle property defines a scanning rectangle on image, not the barcode size. It should be used in case if you know the location of the barcode on image.<br />
For example, the resolution of the input image is 640x480 and the barcode should be located on the right-top corner. In this case you can set the following scanning rectangle, ScanRectangle = (320, 0, 640, 120), 320 - the half of the width, 120 - 1/4 from the height. The detection of the barcodes will be performed in this rectangle only, it's 1/8 of the image.
If you do not want use scan rectangle and process whole image, you should set ScanRectangle = (0,0,0,0), it's a default value.
</remarks>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.ReadFromBuffer(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
	Reads barcodes from the memory buffer containing image pixels in defined format. 
</summary>
            <param name="buffer">The array of bytes which contain the image data</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
            <param name="stride">The stride width (also called scan width)</param>
            <param name="bpp">The number of bits of memory, associated with one pixel of data.</param>
            <remarks>
	Reads barcodes from the memory buffer containing image pixels in specified format. The following bit-per-pixel (bpp) values are suppoted: 1,4,8,24,32. For 1, 4 and 8 bpp the standard palettes will used (gray-scale palette). The pixel formats for 24 and 32 bpp should be RGB. 
</remarks>
            <returns>
	Array of Barcode class instances
</returns>
            <example>
                <code lang="c#">
	BarcodeReader barReader = new BarcodeReader();
	....
	Bitmap bmp = (Bitmap)Image.FromFile("sample.tif");
	BitmapData bmpData = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadOnly, bmp.PixelFormat);
	Barcode[] bars =  barReader.ReadFromBuffer(bmpData.Scan0, bmpData.Width, bmpData.Height, bmpData.Stride, bpp);
</code>
                <code lang="VB">	
	Dim barReader As New BarcodeReader
	....
	Dim bmp As Bitmap = Image.FromFile("sample.tif")
	Dim bmpData As BitmapData = bmp.LockBits(New Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadOnly, bmp.PixelFormat)
	Dim bars As Barcode() = barReader.ReadFromBuffer(bmpData.Scan0, bmpData.Width, bmpData.Height, bmpData.Stride, bpp)
	bmp.UnlockBits(bmpData)
</code>
                <code lang="C++/CLI">
	BarcodeReader^ barReader = gcnew BarcodeReader();
	....
	Bitmap ^bmp = (Bitmap^)Image::FromFile("sample.tif");
	BitmapData ^bmpData = bmp-&gt;LockBits(Rectangle(0, 0, bmp-&gt;Width, bmp-&gt;Height), ImageLockMode::ReadOnly, bmp-&gt;PixelFormat);
	array&lt;Barcode^&gt;^ bars =  barReader-&gt;ReadFromBuffer(bmpData-&gt;Scan0, bmpData-&gt;Width, bmpData-&gt;Height, bmpData-&gt;Stride, bpp);
	bmp-&gt;UnlockBits(bmpData);
</code>
            </example>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.ReadFromMemFile(System.Byte[])">
            <summary>
Reads barcodes from the image file located in memory. 
</summary>
            <param name="fileData">The array of bytes which contain the image file data</param>
            <returns>Array of Barcode class instances</returns>
            <example>
                <code lang="c#">
	BarcodeReader barReader = new BarcodeReader();
	....
	byte[] fileData = File.ReadAllBytes("sample.tif");<br />
	Barcode[] bars = barReader.ReadFromMemFile(fileData);<br /></code>
                <code lang="VB">
	Dim barReader As New BarcodeReader<br />
	....
	Dim fileData As Byte() = File.ReadAllBytes("sample.tif")<br />
	Dim bars As Barcode() = barReader.ReadFromMemFile(fileData)<br /></code>
                <code lang="C++/CLI">
	BarcodeReader^ barReader = gcnew BarcodeReader();<br />
	....
	array&lt;unsigned char&gt;^ fileData = File::ReadAllBytes("sample.tif");
	array&lt;Barcode^&gt;^ bars = barReader-&gt;ReadFromMemFile(fileData);<br /></code>
            </example>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.ReadFromImage(System.Drawing.Image)">
            <summary>
Reads barcodes from System::Drawing::Image instance.
</summary>
            <param name="image">The instance of the System::Drawing::Image object</param>
            <returns>Array of Barcode class instances</returns>
            <example>
                <code lang="c#">
	BarcodeReader barReader = new BarcodeReader();
	....
	Image img = Image.FromFile("sample.tif");<br />
	Barcode[] bars = barReader.ReadFromImage(img);<br /></code>
                <code lang="VB">
	Dim barReader As New BarcodeReader
	....
	Dim img As Image = Image.FromFile("sample.tif")<br />
	Dim bars As Barcode() = barReader.ReadFromBitmap(img)<br /></code>
                <code lang="C++/CLI">
	BarcodeReader^ barReader = gcnew BarcodeReader();<br />
	....
	Image^ img = Image::FromFile("sample.tif");<br />
	array&lt;Barcode^&gt;^ bars = barReader-&gt;ReadFromBitmap(img);<br /></code>
            </example>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.ReadFromBitmap(System.Drawing.Bitmap)">
            <summary>Reads barcodes from System::Drawing::Bitmap instance.</summary>
            <param name="bitmap">The instance of the System::Drawing::Bitmap object</param>
            <returns>Array of Barcode class instances</returns>
            <example>
                <code lang="c#">
	BarcodeReader barReader = new BarcodeReader();
	....
	Bitmap bitmap = (Bitmap)Image.FromFile("sample.tif");<br />
	Barcode[] bars = barReader.ReadFromBitmap(bitmap);<br /></code>
                <code lang="VB">
	Dim barReader As New BarcodeReader
	....
	Dim bitmap As Bitmap = Image.FromFile("sample.tif")<br />
	Dim bars As Barcode() = barReader.ReadFromBitmap(bitmap)<br /></code>
                <code lang="C++/CLI">
	BarcodeReader^ barReader = gcnew BarcodeReader();<br />
	....
	Bitmap^ bitmap = (Bitmap^)Image::FromFile("sample.tif");<br />
	array&lt;Barcode^&gt;^ bars = barReader-&gt;ReadFromBitmap(bitmap);<br /></code>
            </example>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.ReadFromFile(System.String)">
            <summary>
Reads barcodes from image file.
</summary>
            <param name="fileName">File name</param>
            <returns>Array of Barcode class instances</returns>
            <example>
                <code lang="c#">
	BarcodeReader barReader = new BarcodeReader();
	....
	Barcode[] bars = barReader.ReadFromFile("sample.tif");<br /></code>
                <code lang="VB">
	Dim barReader As New BarcodeReader
	....
	Dim bars As Barcode() = barReader.ReadFromFile("sample.tif")<br /></code>
                <code lang="C++/CLI">
	BarcodeReader^ barReader = gcnew BarcodeReader();<br />
	....
	array&lt;Barcode^&gt;^ bars = barReader-&gt;ReadFromFile("sample.tif");<br /></code>
            </example>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.#ctor(System.String)">
            <summary>
Creates the BarcodeReader instance and defines the developer license
</summary>
            <param name="developerLicenseKey">The Developer License key</param>
        </member>
        <member name="M:DTKBarReader.BarcodeReader.#ctor">
            <summary>
Creates the BarcodeReader instance.
</summary>
        </member>
        <member name="E:DTKBarReader.BarcodeReader.OnPageProcessingCompleted">
            <summary>
Delegate defines the event fired after image/page processing.
</summary>
        </member>
        <member name="T:DTKBarReader.BarcodeReader">
            <summary>
This class encapsulates the barcode recognition functionality.
</summary>
        </member>
        <member name="M:DTKBarReader.LicManager.SetActivationCode(System.String)">
            <summary>
Activates the License using the Activation Code. 
</summary>
            <param name="activationCode">The Activation Code</param>
            <returns>If the function succeeds, the function returns 0. If the function fails, it returns the error code.</returns>
        </member>
        <member name="M:DTKBarReader.LicManager.GetActivationLink(System.String,System.String@)">
            <summary>
Gets the Activation Link for the specified License Key and the current computer. 
</summary>
            <param name="licenseKey">The license key</param>
            <param name="activationLink">Receives the Activation Link (URL)</param>
            <returns>If the function succeeds, the function returns 0. If the function fails, it returns the error code.</returns>
        </member>
        <member name="M:DTKBarReader.LicManager.ActivateLicenseOnline(System.String,System.String@)">
            <summary>
Activates the specified License Key on current computer (internet connection required). 
</summary>
            <param name="licenseKey">The license key</param>
            <param name="errorMessage">If the function succeeds, this parameter will be empty string. If the function fails, it contain error message text.</param>
            <returns />
        </member>
        <member name="M:DTKBarReader.LicManager.AddLicenseKey(System.String)">
            <summary>
Appends a license key. 
</summary>
            <param name="licenseKey">The license key</param>
            <returns />
        </member>
        <member name="M:DTKBarReader.LicManager.#ctor">
            <summary>
Creates the BarcodeReader instance.
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.TypeString">
            <summary>
The type of the decoded barcode in string representation. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Type">
            <summary>
The type of the decoded barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Threshold">
            <summary>
The threshold level which was used to detect this barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Page">
            <summary>
The page number of the detected barcode.
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.OrientationString">
            <summary>
The orientaiton of the decoded barcode in string representation. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Orientation">
            <summary>
The orientation of the decoded barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.BarcodeInfoString">
            <summary>
The description of the common barcode information. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.QRVersion">
            <summary>
Version number of the recognized QR Code.
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.ErrorCorrectionLevel">
            <summary>
The error correction level of the recognized 2D barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.NumErrorsCorrected">
            <summary>
The number of errors corrected when decoding the 2D barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Dim2">
            <summary>
The second dimension of the recognized 2D barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Dim1">
            <summary>
The first dimension of the recognized 2D barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.DataMatrix_NumErrorsCorrected">
            <summary>
The number of errors corrected when decoding the DataMatrix barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.DataMatrix_Dim2">
            <summary>
The second dimension of the recognized DataMatrix barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.DataMatrix_Dim1">
            <summary>
The first dimension of the recognized DataMatrix barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.Checksum">
            <summary>
The checksum of the detected barcode (optional).
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.BoundingRectangle">
            <summary>
The bounding rectangle for a barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.Bottom">
            <summary>
The coordinate of the bottom border of the barcode bounding rectangle. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.Right">
            <summary>
The coordinate of the right border of the barcode bounding rectangle. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.Left">
            <summary>
The coordinate of the left border of the barcode bounding rectangle. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.Top">
            <summary>
The coordinate of the top border of the barcode bounding rectangle. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderStartY2">
            <summary>
The Y coordinate of the second point of start boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderStartY1">
            <summary>
The Y coordinate of the first point of start boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderStartX2">
            <summary>
The X coordinate of the second point of start boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderStartX1">
            <summary>
The X coordinate of the first point of start boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderEndY2">
            <summary>
The Y coordinate of the second point of end boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderEndY1">
            <summary>
The Y coordinate of the first point of end boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderEndX2">
            <summary>
The X coordinate of the second point of end boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BorderEndX1">
            <summary>
The X coordinate of the first point of end boundary of the barcode. 
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeCoordinates.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.Angle">
            <summary>
The skew angle of the detected barcode (in degrees).
</summary>
            <remarks>
                <para>
                    <img src="images/BarcodeAngle.jpg" />
                </para>
            </remarks>
        </member>
        <member name="P:DTKBarReader.Barcode.BarcodeDataLen">
            <summary>
The binary data length of the decoded barcode. 
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.BarcodeData">
            <summary>
The binary data of the decoded barcode.
</summary>
        </member>
        <member name="P:DTKBarReader.Barcode.BarcodeString">
            <summary>
The string of the decoded barcode.
</summary>
        </member>
        <member name="T:DTKBarReader.Barcode">
            <summary>
Describes a barcode contained on image. The properties of this class return details of the barcode, including encodation, symbology, and postion within the image.
</summary>
        </member>
        <member name="T:DTKBarReader.BarcodeReaderException">
            <summary>
Represents errors that occur during barcode recogntion execution.
</summary>
        </member>
        <member name="T:DTKBarReader.PageProcessingCompleted">
            <summary>
Delegate defines the event fired after image/page processing.
</summary>
        </member>
        <member name="T:DTKBarReader.ThresholdModeEnum">
            <summary>
The image thresholding mode
</summary>
            <remarks>
Threshold related parameters: ThresholdMode, Threshold, ThresholdStep, ThresholdCount. 
The threshold value is used to distinguish a foreground and background pixels (black and white information) 
in color or gray-scale images. The possible values of the threshold are 0..255. Each pixel on color or gray image 
have an intensity from 0 (black) to 255 (white). Defining the threshold value 128 (default) the pixels with intensity less than 128 
will be considered as black (foreground) pixels, and the pixels with intensity greater than 128 - as white (background) pixels.<br /><br />
The threshold parameters are ignored for binary (black and white) images.<br /><br />
1) ThresholdMode = TM_Automatic<br />
The threshold is detected automatically by using adaptive global threshold algorithm. The threshold will be detected for each image (page).<br />
The Threshold, ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
2) ThresholdMode = TM_Fixed<br />
The parameter Threshold will be used only. The value defined by Threshold parameter will be used.<br />
The ThresholdStep and ThresholdCount parameters not used in this mode.<br /><br />
3) ThresholdMode = TM_Multiple<br />
The different threshold values will be used in this mode. The value defined in Threshold parameter will be mean value.<br /><br />
4) ThresholdMode = TM_Adaptive<br />
The algorithm will consider each pixel one at a time, calculate the mean of the local neighborhood in 'Radius' and thresholds the current pixel to white if the difference between the calculated mean and the current pixel value is lower than the 'Mean offset'.<br />
The 'Radius' and 'Mean offset' parameters can be adjusted using the ADAPTIVE_THRESHOLD_RADIUS and ADAPTIVE_THRESHOLD_MOFFSET extra parameters.<br /> 
Example: <br /> 
barReader.SetExtraParam("ADAPTIVE_THRESHOLD_RADIUS", 5);<br /> 
barReader.SetExtraParam("ADAPTIVE_THRESHOLD_MOFFSET", 7);<br /><br />
Default values are ADAPTIVE_THRESHOLD_RADIUS = 5 and ADAPTIVE_THRESHOLD_MOFFSET = 7
<br /></remarks>
            <example />
        </member>
        <member name="F:DTKBarReader.ThresholdModeEnum.TM_Adaptive">
            <summary>
Adaptive
</summary>
        </member>
        <member name="F:DTKBarReader.ThresholdModeEnum.TM_Multiple">
            <summary>
Multiple
</summary>
        </member>
        <member name="F:DTKBarReader.ThresholdModeEnum.TM_Fixed">
            <summary>
Fixed
</summary>
        </member>
        <member name="F:DTKBarReader.ThresholdModeEnum.TM_Automatic">
            <summary>
Automatic
</summary>
        </member>
        <member name="T:DTKBarReader.PDFReadingTypeEnum">
            <summary>
The reading type of the PDF documents
</summary>
            <remarks>
                <para>PDF_Render</para>
                <para>In this case the page of the PDF document will be rendered to single image with defined DPI (property PDFRenderDPI). 
If the PDF page contain the different objects, like text, graphics, images, etc., then all objects will be rendered to single
bitmap image (like you can see this page in PDF viewer).</para>
                <para>PDF_Images</para>
                <para>All image objects located on PDF page will be extracted and barcode recognition will be executed on each image separately.
The other non-image objects like text will be ignored. The barcode can be created as text object using the barcode font, 
and using the PDF_Images option this barcode will not be recognized, since only the image objects will be considered.</para>
            </remarks>
            <example />
        </member>
        <member name="F:DTKBarReader.PDFReadingTypeEnum.PDF_Images">
            <summary>
Extract image objects from PDF page
</summary>
        </member>
        <member name="F:DTKBarReader.PDFReadingTypeEnum.PDF_Render">
            <summary>
Render PDF pages
</summary>
        </member>
        <member name="T:DTKBarReader.QuietZoneSizeEnum">
            <summary>
Size of the quiet zone.
</summary>
            <value />
            <remarks>
A quiet zone is the blank margin on either side of a bar code that's used to tell the barcode reader where a barcode's symbology starts and stops. 
The purpose of a quiet zone is to prevent the reader from picking up information that does not pertain to the barcode that is being scanned.
As a rule, the quiet zone should be ten times the dimension of the narrowest element in the barcode. 
</remarks>
            <example />
        </member>
        <member name="F:DTKBarReader.QuietZoneSizeEnum.QZ_Large">
            <summary>
Large size of quiet zone
</summary>
        </member>
        <member name="F:DTKBarReader.QuietZoneSizeEnum.QZ_Normal">
            <summary>
Normal size of quiet zone
</summary>
        </member>
        <member name="F:DTKBarReader.QuietZoneSizeEnum.QZ_Small">
            <summary>
Small size of quiet zone
</summary>
        </member>
        <member name="F:DTKBarReader.QuietZoneSizeEnum.QZ_ExtraSmall">
            <summary>
Very small size of quiet zone
</summary>
        </member>
        <member name="T:DTKBarReader.BarcodeOrientationEnum">
            <summary>
Orientation of the barcode.
</summary>
            <value />
            <remarks>
                <para>The barcode reader can detect barcodes at any orientation or placement, although if you know that all barcodes will be oriented in a particular way, this can be used to speed up the recognition process. 
For example, if you define orientation LetfToRight only, this mean that barcodes with horizontal orientation (in left-right direction) in angle +/- 45 degree can be detected.</para>
                <para>
                    <img src="images/orientation.jpg" />
                </para>
            </remarks>
            <example />
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_All">
            <summary>
All possible orintations
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_BottomToTop">
            <summary>
Vertical, bottom to top orintation
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_TopToBottom">
            <summary>
Vertical, top to bottom orintation
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_RightToLeft">
            <summary>
Horizontal, right to left orintation
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_LeftToRight">
            <summary>
Horizontal, left to right orintation
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeOrientationEnum.BO_Unknown">
            <summary>
Unknown orientation
</summary>
        </member>
        <member name="T:DTKBarReader.BarcodeTypeEnum">
            <summary>
Specifies the type of the bar-code.
</summary>
            <value />
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_All">
            <summary>
All supported barcodes
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_All_2D">
            <summary>
All supported 2D barcodes
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_All_1D">
            <summary>
All supported 1D barcodes
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_PharmaCode">
            <summary>
PharmaCode
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_MicroQRCode">
            <summary>
Micro QR-Code
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Code39Extended">
            <summary>
Extended Code 39 
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_IntelligentMail">
            <summary>
IntelligentMail
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_AustraliaPost">
            <summary>
AustraliaPost
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_RM4SCC">
            <summary>
RM4SCC (Royal Mail 4-State Customer Code)
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Planet">
            <summary>
Planet
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Postnet">
            <summary>
Postnet
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_QRCode">
            <summary>
QR-Code
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_DataMatrix">
            <summary>
DataMatrix
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_PDF417">
            <summary>
PDF-417
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Plus5">
            <summary>
The 5-digit supplemental code related with EAN and UPC barcodes.
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Plus2">
            <summary>
The 2-digit supplemental code related with EAN and UPC barcodes.
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_UPCA">
            <summary>
UPC-A
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_EAN13">
            <summary>
EAN-13
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_UPCE">
            <summary>
UPC-E
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_EAN8">
            <summary>
EAN-8
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_PatchCode">
            <summary>
Patch Code
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Inter2of5">
            <summary>
Interleaved 2 of 5
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Codabar">
            <summary>
Codabar
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Code128">
            <summary>
Code 128
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Code93">
            <summary>
Code 93
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Code39">
            <summary>
Code 39
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Code11">
            <summary>
Code 11
</summary>
        </member>
        <member name="F:DTKBarReader.BarcodeTypeEnum.BT_Unknown">
            <summary>
Unknown barcode type.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'P:DTKBarReader.BarcodeReader.RecognitionTimeout'. -->
    </members>
</doc>