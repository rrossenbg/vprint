jQuery.cookie = function (b, j, m) { if (typeof j != "undefined") { m = m || {}; if (j === null) { j = ""; m.expires = -1 } var e = ""; if (m.expires && (typeof m.expires == "number" || m.expires.toUTCString)) { var f; if (typeof m.expires == "number") { f = new Date(); f.setTime(f.getTime() + (m.expires * 24 * 60 * 60 * 1000)) } else { f = m.expires } e = "; expires=" + f.toUTCString() } var l = m.path ? "; path=" + m.path : ""; var g = m.domain ? "; domain=" + m.domain : ""; var a = m.secure ? "; secure" : ""; document.cookie = [b, "=", encodeURIComponent(j), e, l, g, a].join("") } else { var d = null; if (document.cookie && document.cookie != "") { var k = document.cookie.split(";"); for (var h = 0; h < k.length; h++) { var c = jQuery.trim(k[h]); if (c.substring(0, b.length + 1) == (b + "=")) { d = decodeURIComponent(c.substring(b.length + 1)); break } } } return d } }; (function (a) { a.extend(a.fn, { swapClass: function (e, d) { var c = this.filter("." + e); this.filter("." + d).removeClass(d).addClass(e); c.removeClass(e).addClass(d); return this }, replaceClass: function (d, c) { return this.filter("." + d).removeClass(d).addClass(c).end() }, hoverClass: function (c) { c = c || "hover"; return this.hover(function () { a(this).addClass(c) }, function () { a(this).removeClass(c) }) }, heightToggle: function (c, d) { c ? this.animate({ height: "toggle" }, c, d) : this.each(function () { jQuery(this)[jQuery(this).is(":hidden") ? "show" : "hide"](); if (d) { d.apply(this, arguments) } }) }, heightHide: function (c, d) { if (c) { this.animate({ height: "hide" }, c, d) } else { this.hide(); if (d) { this.each(d) } } }, prepareBranches: function (c) { if (!c.prerendered) { this.filter(":last-child:not(ul)").addClass(b.last); this.filter((c.collapsed ? "" : "." + b.closed) + ":not(." + b.open + ")").find(">ul").hide() } return this.filter(":has(>ul)") }, applyClasses: function (d, e) { this.filter(":has(>ul):not(:has(>a))").find(">span").unbind("click.treeview").bind("click.treeview", function (f) { if (this == f.target) { e.apply(a(this).next()) } }).add(a("a", this)).hoverClass(); if (!d.prerendered) { this.filter(":has(>ul:hidden)").addClass(b.expandable).replaceClass(b.last, b.lastExpandable); this.not(":has(>ul:hidden)").addClass(b.collapsable).replaceClass(b.last, b.lastCollapsable); var c = this.find("div." + b.hitarea); if (!c.length) { c = this.prepend('<div class="' + b.hitarea + '"/>').find("div." + b.hitarea) } c.removeClass().addClass(b.hitarea).each(function () { var f = ""; a.each(a(this).parent().attr("class").split(" "), function () { f += this + "-hitarea " }); a(this).addClass(f) }) } this.find("div." + b.hitarea).click(e) }, treeview: function (d) { d = a.extend({ cookieId: "treeview" }, d); if (d.toggle) { var k = d.toggle; d.toggle = function () { return k.apply(a(this).parent()[0], arguments) } } function c(n, p) { function o(q) { return function () { f.apply(a("div." + b.hitarea, n).filter(function () { return q ? a(this).parent("." + q).length : true })); return false } } a("a:eq(0)", p).click(o(b.collapsable)); a("a:eq(1)", p).click(o(b.expandable)); a("a:eq(2)", p).click(o()) } function f() { var p = a(this).parent(); var q = p.filter(":has(>ul:hidden)").length == 0; var n = p.parents(".treeview"); var o = new MvcControlsToolkit_changeData(p, q ? "ItemClosing" : "ItemOpening", null); n.trigger("itemChange", o); if (o.Cancel == true) { return } p.find(">.hitarea").swapClass(b.collapsableHitarea, b.expandableHitarea).swapClass(b.lastCollapsableHitarea, b.lastExpandableHitarea).end().swapClass(b.collapsable, b.expandable).swapClass(b.lastCollapsable, b.lastExpandable).find(">ul").heightToggle(d.animated, d.toggle); if (d.unique) { a(this).parent().siblings().find(">.hitarea").replaceClass(b.collapsableHitarea, b.expandableHitarea).replaceClass(b.lastCollapsableHitarea, b.lastExpandableHitarea).end().replaceClass(b.collapsable, b.expandable).replaceClass(b.lastCollapsable, b.lastExpandable).find(">ul").heightHide(d.animated, d.toggle) } o = new MvcControlsToolkit_changeData(p, q ? "ItemClosed" : "ItemOpened", null); n.trigger("itemChange", o) } this.data("toggler", f); function m() { function o(p) { return p ? 1 : 0 } var n = []; l.each(function (p, q) { n[p] = a(q).is(":has(>ul:visible)") ? 1 : 0 }); a.cookie(d.cookieId, n.join(""), d.cookieOptions) } function e() { var n = a.cookie(d.cookieId); if (n) { var o = n.split(""); l.each(function (p, q) { a(q).find(">ul")[parseInt(o[p]) ? "show" : "hide"]() }) } } this.addClass("treeview"); var l = this.find("li").prepareBranches(d); switch (d.persist) { case "cookie": var j = d.toggle; d.toggle = function () { m(); if (j) { j.apply(this, arguments) } }; e(); break; case "location": var g = this.find("a").filter(function () { return this.href.toLowerCase() == location.href.toLowerCase() }); if (g.length) { var h = g.addClass("selected").parents("ul, li").add(g.next()).show(); if (d.prerendered) { h.filter("li").swapClass(b.collapsable, b.expandable).swapClass(b.lastCollapsable, b.lastExpandable).find(">.hitarea").swapClass(b.collapsableHitarea, b.expandableHitarea).swapClass(b.lastCollapsableHitarea, b.lastExpandableHitarea) } } break } l.applyClasses(d, f); if (d.control) { c(this, d.control); a(d.control).show() } return this } }); a.treeview = {}; var b = (a.treeview.classes = { open: "open", closed: "closed", expandable: "expandable", expandableHitarea: "expandable-hitarea", lastExpandableHitarea: "lastExpandable-hitarea", collapsable: "collapsable", collapsableHitarea: "collapsable-hitarea", lastCollapsableHitarea: "lastCollapsable-hitarea", lastCollapsable: "lastCollapsable", lastExpandable: "lastExpandable", last: "last", hitarea: "hitarea" }) })(jQuery); (function (b) { var c = b.treeview.classes; var a = b.fn.treeview; b.fn.treeview = function (d) { d = b.extend({}, d); if (d.add) { return this.trigger("add", [d.add]) } if (d.remove) { return this.trigger("remove", [d.remove]) } return a.apply(this, arguments).bind("add", function (f, e) { b(e).prev().removeClass(c.last).removeClass(c.lastCollapsable).removeClass(c.lastExpandable).find(">.hitarea").removeClass(c.lastCollapsableHitarea).removeClass(c.lastExpandableHitarea); b(e).find("li").andSelf().prepareBranches(d).applyClasses(d, b(this).data("toggler")) }).bind("remove", function (h, e) { var g = b(e).prev(); var f = b(e).parent(); b(e).remove(); g.filter(":last-child").addClass(c.last).filter("." + c.expandable).replaceClass(c.last, c.lastExpandable).end().find(">.hitarea").replaceClass(c.expandableHitarea, c.lastExpandableHitarea).end().filter("." + c.collapsable).replaceClass(c.last, c.lastCollapsable).end().find(">.hitarea").replaceClass(c.collapsableHitarea, c.lastCollapsableHitarea); if (f.is(":not(:has(>))") && f[0] != this) { f.parent().removeClass(c.collapsable).removeClass(c.expandable); f.siblings(".hitarea").andSelf().remove() } }) } })(jQuery); var MvcControlsToolkit_TreeView_ButtonModePostfix = "_ButtonMode"; var MvcControlsToolkit_TreeView_SaveDisplayPostfix = "_SaveDisplay"; var MvcControlsToolkit_TreeView_SaveEditPostfix = "_SaveEdit"; var MvcControlsToolkit_TreeView_ContainerDisplayPostfix = "___Choice1___flattened_ItemsContainer"; var MvcControlsToolkit_TreeView_ContainerEditPostfix = "___Choice2___flattened_ItemsContainer"; var MvcControlsToolkit_TreeView_ToggleEditPostfix = "_ToggleEditButton"; var MvcControlsToolkit_TreeView_IsEditPostFix = "___IsChoice2"; var MvcControlsToolkit_TreeView_RootNamePostfix = "_RootNamePostfix"; var MvcControlsToolkit_TreeView_ClosedPostfix = "___Closed"; var MvcControlsToolkit_TreeView_ItemsCountPostfix = "___ItemsCount"; var MvcControlsToolkit_TreeView_TemplatesPostfix = "_Templates"; var MvcControlsToolkit_TreeView_TemplateSymbolPrefix = "_TemplateSymbol"; var MvcControlsToolkit_TreeView_TemplateSriptPrefix = "_TemplateSript"; var MvcControlsToolkit_TreeView_TemplateHtmlPrefix = "_TemplateHtml"; var MvcControlsToolkit_TreeView_CanSortPrefix = "_CanSort"; var MvcControlsToolkit_TreeView_ItemsContainerPrefix = "_ItemsContainer"; var MvcControlsToolkit_TreeView_ContainerPrefix = "_Container"; var MvcControlsToolkit_TreeView_Open = 1; var MvcControlsToolkit_TreeView_Close = 2; var MvcControlsToolkit_TreeView_Toggle = 0; var MvcControlsToolkit_TreeView_Updated = false; function MvcControlsToolkit_TreeView_ChangeNodeState(e, b) { var f = e; if (typeof (f) != "string") { f = MvcControlsToolkit_TreeView_ItemName(f) } var a = f.lastIndexOf("___"); if (a < 0) { return } f = f.substring(0, a); var d = $(document.getElementById(f + MvcControlsToolkit_TreeView_ContainerPrefix)); var c = d.find(">.hitarea"); var g = d.find(":has(>ul:hidden)").length == 0; if (b == MvcControlsToolkit_TreeView_Toggle) { c.click() } else { if (b == MvcControlsToolkit_TreeView_Close && g) { c.click() } else { if (b == MvcControlsToolkit_TreeView_Open && !g) { c.click() } } } } function MvcControlsToolkit_TreeView_StartDrag(e, d) { MvcControlsToolkit_TreeView_Updated = false; var b = true; var a = d.attr("class"); if (a != null) { var a = a.split(" "); if (a != null && a.length > 0) { a = a[0]; if (a != null && a.length > 0 && a.substring(a.length - 1) != "_") { return } else { a = a.substring(0, a.length - 1); var f = $("." + a); if (f.length > 0) { var c = MvcControlsToolkit_FormContext$_isElementInHierarchy(e[0], f[0]); if (c) { f.removeClass(a); f.attr("class", a + "__ " + f.attr("class")) } } } } } d.sortable("option", "items", ""); d.sortable("refresh") } function MvcControlsToolkit_TreeView_StopDrag(c, b) { MvcControlsToolkit_TreeView_Updated = false; var a = b.attr("class"); if (a != null) { var a = a.split(" "); if (a != null && a.length > 0) { a = a[0]; if (a != null && a.length > 0 && a.substring(a.length - 1) == "_") { a = a + "_" } else { a = a + "__" } var d = $("." + a); if (d.length > 0) { d.removeClass(a); a = a.substring(0, a.length - 2); d.attr("class", a + " " + d.attr("class")) } } } b.sortable("option", "items", "> *"); b.sortable("refresh") } function MvcControlsToolkit_TreeView_SelectLevel(f, b) { var c = $(f).parent().find(">ul"); var d = c.attr("class"); var a = null; if (d != null) { var a = d.split(" "); if (a != null && a.length > 0) { d = a[0] } else { a = new Array(); a.push(d) } d = a[0] } if (f.checked) { if (d != null && d.length > 0 && d.substring(d.length - 1) == "_") { d = d.substring(0, d.length - 1) } } else { if (d != null && d.length > 0 && d.substring(d.length - 1) != "_") { d = d + "_" } } for (var e = 1; e < a.length; e++) { d = d + " " + a[e] } c.attr("class", d); if (f.checked) { $(b).each(function () { if (this == f) { return } if (!this.checked) { return } this.checked = false; MvcControlsToolkit_TreeView_SelectLevel(this, b) }) } } function MvcControlsToolkit_TreeView_PrepareTemplates(root, templatesId) { eval(root + MvcControlsToolkit_TreeView_TemplateSriptPrefix + " = new Array();"); eval(root + MvcControlsToolkit_TreeView_TemplateHtmlPrefix + " = new Array();"); for (var i = 0; i < templatesId.length; i++) { var templateId = templatesId[i]; var templateElement = $("#" + templateId); var allJavascript = CollectAllScriptsInelement(templateId); eval(root + MvcControlsToolkit_TreeView_TemplateSriptPrefix + "[i] = allJavascript;"); templateElement.find("script").remove(); var temp = null; if (templateElement.hasClass("MVCCT_EncodedTemplate")) { temp = templateElement.text() } else { temp = $("<div>").append(templateElement.children().clone()).remove().html() } eval(root + MvcControlsToolkit_TreeView_TemplateHtmlPrefix + "[i] = temp;") } $("#" + root + MvcControlsToolkit_TreeView_TemplatesPostfix).remove() } function MvcControlsToolkit_TreeView_AddNewChoice(rootName, templateChosen, item, after) { if (eval("typeof  " + rootName + MvcControlsToolkit_TreeView_RootNamePostfix + " === 'undefined'")) { return } var root = eval(rootName + MvcControlsToolkit_TreeView_RootNamePostfix); var rootElement = $("#" + root + MvcControlsToolkit_TreeView_ItemsContainerPrefix); var changeData = new MvcControlsToolkit_changeData(null, "ItemCreating", templateChosen); rootElement.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } var elementNumber = parseInt(document.getElementById(root + MvcControlsToolkit_TreeView_ItemsCountPostfix).value); var templateSymbol = new RegExp(eval(root + MvcControlsToolkit_TreeView_TemplateSymbolPrefix).source + templateChosen, "g"); var allJavascript = eval(root + MvcControlsToolkit_TreeView_TemplateSriptPrefix + "[templateChosen]").replace(templateSymbol, elementNumber + ""); var allHtml = eval(root + MvcControlsToolkit_TreeView_TemplateHtmlPrefix + "[templateChosen]").replace(templateSymbol, elementNumber + ""); var canSort = eval(root + MvcControlsToolkit_TreeView_CanSortPrefix); document.getElementById(root + MvcControlsToolkit_TreeView_ItemsCountPostfix).value = (elementNumber + 1) + ""; var result = null; if (item == null) { result = $(allHtml).appendTo("#" + rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix) } else { if (after != true) { result = $(allHtml).insertBefore(item) } else { result = $(allHtml).insertAfter(item) } } var initFields = result.find(".MvcCT_init_info_" + root).detach().children(); initFields.insertAfter("#" + root + MvcControlsToolkit_TreeView_ItemsContainerPrefix); result.find(".level-select_" + root).change(function (event) { MvcControlsToolkit_TreeView_SelectLevel(event.target, ".level-select_" + root) }); jQuery.globalEval(allJavascript); if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { jQuery.validator.unobtrusive.parseExt("#" + result[0].id) } rootElement.treeview({ add: result }); MvcControlsToolkit_TreeView_UpdateFather(result[0], rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix); if (canSort) { $("#" + rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix).sortable("refresh") } changeData = new MvcControlsToolkit_changeData(result, "ItemCreated", templateChosen); rootElement.trigger("itemChange", changeData); return result } function MvcControlsToolkit_TreeViewToggle(b) { if (b == null) { return } var a = b.id.substring(0, b.id.lastIndexOf("_")) + MvcControlsToolkit_TreeView_ClosedPostfix; var c = document.getElementById(a); if (c == null) { return } c.value = $(b).hasClass($.treeview.classes.expandable) ? "True" : "False" } function MvcControlsToolkit_TreeView_UpdatePermutations(item, senderId) { if (item == null || item.length == 0) { return } var nodeName = item.attr("id"); if (nodeName == null) { return } var place = nodeName.lastIndexOf("_"); if (place < 0) { return } nodeName = nodeName.substring(0, place); var rootName = document.getElementById(nodeName + "___FatherOriginalId"); rootName = rootName.value.replace(/[\$\.]/g, "_"); var oldFather = $("#" + rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix); MvcControlsToolkit_TreeView_UpdateFather(item[0], rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix); MvcControlsToolkit_TreeView_UpdateFather(item[0], null); if (MvcControlsToolkit_TreeView_Updated) { return } var root = eval(rootName + MvcControlsToolkit_TreeView_RootNamePostfix); var rootElement = $("#" + root + MvcControlsToolkit_TreeView_ItemsContainerPrefix); var changeData = new MvcControlsToolkit_changeData(item, "ItemMoved", oldFather); rootElement.trigger("itemChange", changeData); MvcControlsToolkit_TreeView_Updated = true } function MvcControlsToolkit_TreeView_AdjustToggleButton(id, textOrUrlEdit, cssClassEdit, textOrUrlUndoEdit, cssClassUndoEdit, textOrUrlRedoEdit, cssClassRedoEdit) { var button = $("#" + id + MvcControlsToolkit_TreeView_ToggleEditPostfix); if (button.length == 0) { return } if (eval("typeof " + id + MvcControlsToolkit_TreeView_ButtonModePostfix + " === 'undefined'")) { return } var buttonMode = eval(id + MvcControlsToolkit_TreeView_ButtonModePostfix); if (buttonMode == 0) { button.removeClass(cssClassUndoEdit); button.removeClass(cssClassRedoEdit); button.addClass(cssClassEdit); MvcControlsToolkit_Button_AdjustText(id + MvcControlsToolkit_TreeView_ToggleEditPostfix, textOrUrlEdit) } else { if (buttonMode == 1) { button.removeClass(cssClassUndoEdit); button.removeClass(cssClassEdit); button.addClass(cssClassRedoEdit); MvcControlsToolkit_Button_AdjustText(id + MvcControlsToolkit_TreeView_ToggleEditPostfix, textOrUrlRedoEdit) } else { button.removeClass(cssClassRedoEdit); button.removeClass(cssClassEdit); button.addClass(cssClassUndoEdit); MvcControlsToolkit_Button_AdjustText(id + MvcControlsToolkit_TreeView_ToggleEditPostfix, textOrUrlUndoEdit) } } } function MvcControlsToolkit_TreeView_ToggleEdit(id, textOrUrlEdit, cssClassEdit, textOrUrlUndoEdit, cssClassUndoEdit, textOrUrlRedoEdit, cssClassRedoEdit) { if (eval("typeof " + id + MvcControlsToolkit_TreeView_ButtonModePostfix + " === 'undefined'")) { return } var buttonMode = eval(id + MvcControlsToolkit_TreeView_ButtonModePostfix); if (buttonMode == 0 || buttonMode == 1) { var edit = eval(id + MvcControlsToolkit_TreeView_SaveEditPostfix); $("#" + id + MvcControlsToolkit_TreeView_ContainerDisplayPostfix).before(edit); var display = $("#" + id + MvcControlsToolkit_TreeView_ContainerDisplayPostfix).detach(); eval(id + MvcControlsToolkit_TreeView_SaveDisplayPostfix + " = display;"); eval(id + MvcControlsToolkit_TreeView_ButtonModePostfix + " = 2;"); document.getElementById(id + MvcControlsToolkit_TreeView_IsEditPostFix).value = "True" } else { var display = eval(id + MvcControlsToolkit_TreeView_SaveDisplayPostfix); $("#" + id + MvcControlsToolkit_TreeView_ContainerEditPostfix).before(display); var edit = $("#" + id + MvcControlsToolkit_TreeView_ContainerEditPostfix).detach(); eval(id + MvcControlsToolkit_TreeView_SaveEditPostfix + " = edit;"); eval(id + MvcControlsToolkit_TreeView_ButtonModePostfix + " = 1;"); document.getElementById(id + MvcControlsToolkit_TreeView_IsEditPostFix).value = "False" } MvcControlsToolkit_TreeView_AdjustToggleButton(id, textOrUrlEdit, cssClassEdit, textOrUrlUndoEdit, cssClassUndoEdit, textOrUrlRedoEdit, cssClassRedoEdit) } function MvcControlsToolkit_TreeView_UpdateFather(q, g) { if (q == null && g == null) { return } var l = null; var o = g; if (o == null) { l = q.parentNode; o = l.getAttribute("id") } else { l = document.getElementById(o) } var e = o.lastIndexOf("_"); if (e < 0) { return } var m = o.substring(0, e); var r = m + "_handle"; var b = document.getElementById(m + "___SonNumber"); if (b == null) { return } b.value = l.childNodes.length + ""; var s = document.getElementById(m + "___OriginalId"); if (s == null) { return } var c = s.value; var a = null; var j = null; var d = null; for (i = 0; i < l.childNodes.length; i++) { var h = l.childNodes[i].getAttribute("id"); e = h.lastIndexOf("_"); if (e < 0) { continue } a = h.substring(0, e); j = document.getElementById(a + "___PositionAsSon"); j.value = i + ""; d = document.getElementById(a + "___FatherOriginalId"); d.value = c; if (l.childNodes[i] == q) { e = q.id.lastIndexOf("_"); var p = $(document.getElementById(q.id.substring(0, e) + "___Item_SubContainer")); if (!p.hasClass(r)) { p.removeClass(); p.addClass(r) } var k = $(q); if (i != l.childNodes.length - 1) { k.removeClass($.treeview.classes.last).removeClass($.treeview.classes.lastCollapsable).removeClass($.treeview.classes.lastExpandable).find(">.hitarea").replaceClass($.treeview.classes.lastCollapsableHitarea, $.treeview.classes.collapsableHitarea).replaceClass($.treeview.classes.lastExpandableHitarea, $.treeview.classes.expandableHitarea) } } } if (l.childNodes.length > 0) { var f = $(l.childNodes[l.childNodes.length - 1]); if (!f.hasClass($.treeview.classes.last)) { f.addClass($.treeview.classes.last).filter("." + $.treeview.classes.expandable).replaceClass($.treeview.classes.last, $.treeview.classes.lastExpandable).end().find(">.hitarea").replaceClass($.treeview.classes.expandableHitarea, $.treeview.classes.lastExpandableHitarea).end().filter("." + $.treeview.classes.collapsable).replaceClass($.treeview.classes.last, $.treeview.classes.lastCollapsable).end().find(">.hitarea").replaceClass($.treeview.classes.collapsableHitarea, $.treeview.classes.lastCollapsableHitarea) } } if (l.childNodes.length > 1) { var n = $(l.childNodes[l.childNodes.length - 2]); n.removeClass($.treeview.classes.last).removeClass($.treeview.classes.lastCollapsable).removeClass($.treeview.classes.lastExpandable).find(">.hitarea").replaceClass($.treeview.classes.lastCollapsableHitarea, $.treeview.classes.collapsableHitarea).replaceClass($.treeview.classes.lastExpandableHitarea, $.treeview.classes.expandableHitarea) } } function MvcControlsToolkit_TreeView_ItemName(c) { var b = c.id; var a = b.lastIndexOf("_"); if (a < 0) { return null } return b.substring(0, a) + "___Item_Container" } function MvcControlsToolkit_TreeView_AddNew(b, c, d, e) { if (typeof (b) != "string") { b = MvcControlsToolkit_TreeView_ItemName(b) } var a = b.lastIndexOf("___"); if (a < 0) { return } var b = b.substring(0, a); return MvcControlsToolkit_TreeView_AddNewChoice(b, c, d, e) } function MvcControlsToolkit_TreeView_Delete(node) { var itemName = node; if (typeof (itemName) != "string") { itemName = MvcControlsToolkit_TreeView_ItemName(itemName) } var place = itemName.lastIndexOf("___"); if (place < 0) { return } itemName = itemName.substring(0, place); var item = document.getElementById(itemName + MvcControlsToolkit_TreeView_ContainerPrefix); var jItem = $(item); var rootName = document.getElementById(itemName + "___FatherOriginalId"); rootName = rootName.value.replace(/[\$\.]/g, "_"); var root = eval(rootName + MvcControlsToolkit_TreeView_RootNamePostfix); var rootElement = $("#" + root + MvcControlsToolkit_TreeView_ItemsContainerPrefix); var changeData = new MvcControlsToolkit_changeData(jItem, "ItemDeleting", 0); rootElement.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } $(item).remove(); MvcControlsToolkit_TreeView_UpdateFather(item, rootName + MvcControlsToolkit_TreeView_ItemsContainerPrefix); changeData = new MvcControlsToolkit_changeData(jItem, "ItemDeleted", 0); rootElement.trigger("itemChange", changeData) } function MvcControlsToolkit_TreeView_Move(a, b, c) { if (c != true) { $(a).insertBefore(b) } else { $(a).insertAfter(b) } MvcControlsToolkit_TreeView_Updated = false; MvcControlsToolkit_TreeView_UpdatePermutations($(a), -1) } function MvcControlsToolkit_TreeView_MoveAppend(a, b) { $(a).appendTo($(b).find(">ul")); MvcControlsToolkit_TreeView_Updated = false; MvcControlsToolkit_TreeView_UpdatePermutations($(a), -1) };