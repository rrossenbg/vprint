(function () { mvcct.$$ = { and: "and", or: "or", not: "not", eq: "eq", ne: "ne", gt: "gt", ge: "ge", lt: "lt", le: "le", endswith: "endswith", startswith: "startswith", substringof: "substringof", substringofInv: "substringofInv", notSupported: "ns", encodeCondition: function (code) { if (code == "Equal" || code == "1") { return mvcct.$$.eq } else { if (code == "NotEqual" || code == "2") { return mvcct.$$.ne } else { if (code == "LessThan" || code == "4") { return mvcct.$$.lt } else { if (code == "LessThanOrEqual" || code == "8") { return mvcct.$$.le } else { if (code == "GreaterThan" || code == "16") { return mvcct.$$.gt } else { if (code == "GreaterThanOrEqual" || code == "32") { return mvcct.$$.ge } else { if (code == "StartsWith" || code == "64") { return mvcct.$$.startswith } else { if (code == "EndsWith" || code == "128") { return mvcct.$$.endswith } else { if (code == "Contains" || code == "256") { return mvcct.$$.substringofInv } else { if (code == "IsContainedIn" || code == "512") { return mvcct.$$.substringof } else { return mvcct.$$.notSupported } } } } } } } } } } } }; mvcct.Queryable = function (fop, negate) { var _filterOperator = fop || this.$$.and; return { filterOperator: function () { return _filterOperator }, get: function () { return null }, execute: function (callBack) { }, getState: function () { return null }, setState: function (state) { }, resetFilter: function () { return this }, resetSorting: function () { return this }, resetPaging: function () { return this }, setSorting: function (sortString) { return this }, setFilter: function (filterString) { return this }, setPaging: function (page, pageSize) { return this }, importSorting: function (sortString) { if (sortString == null || sortString == "") { return this } this.resetSorting(); var allConditions = sortString.split(";"); for (var i = 0; i < allConditions.length; i++) { var pair = allConditions[i].split("#"); if (pair.length < 2) { continue } this.addSort(MvcControlsToolkit_Trim(pair[0]), pair[1].indexOf("-") >= 0) } return this }, importSortingControl: function (sortingControlId) { return this.importSorting($("#" + sortingControlId + "___SortInfoAsString").val()) }, importPager: function (pagerId, pageSize) { var pager = $("#" + pagerId); this.setPaging(parseInt(pager.val()), pageSize); return this }, addSort: function (field, desc, enabled) { return this }, addCondition: function (operator, value1, value2, enabled, currType) { return this }, addConditionAsString: function (operator, field, currSearch, currType, enabled) { if (enabled === false) { return this } currSearch = MvcControlsToolkit_Parse(currSearch, currType); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { this.addCondition(operator, field, currSearch, currType, enabled) } }, open: function (logicalOperator, enabled, negate) { return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } return this.father }, importClauses: function (filterID) { var index = 0; var finished = false; var inner = this; if (this.filterOperator() != mvcct.$$.and) { inner = this.open(mvcct.$$.and, true) } while (!finished) { var ph = $("#" + filterID + "___" + index); var base = filterID + "___" + index + "___"; if (ph.length != 0) { var selector = $("#" + base + "Selected"); if (selector.length > 0 && (selector.val() == "True" || (selector.prop("checked") || false))) { var currCondition = mvcct.$$.encodeCondition($("#" + base + "Condition").val()); if (currCondition != mvcct.$$.notSupported) { var field = $("#" + filterID + "___" + index + "_f_ields").val().split(",")[0]; var currSearchDom = $("#" + base + "Search"); var currSearch = null; var currType = null; var control = $("#" + base + "Search[data-element-type], #" + base + "Search_hidden[data-element-type], #" + base + "Search___Hidden[data-element-type]"); if (control.length > 0) { currType = parseInt(control.attr("data-client-type") || "0"); var element = control[0]; currSearch = eval("MvcControlsToolkit_" + control.attr("data-element-type") + "_Get(element, currType)"); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { inner.addCondition(currCondition, field, currSearch, currType) } } else { currSearch = currSearchDom.val(); currType = parseInt(currSearchDom.attr("data-client-type") || "0"); inner.addConditionAsString(currCondition, field, currSearch, currType) } } } } else { finished = true } index++ } if (this.filterOperator() != mvcct.$$.and) { inner.close(true) } return this } } }; mvcct.oDataQueryable = function (link, fop, options, negate) { var filter = ""; var sorting = ""; var paging = ""; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.oDataQueryable.DefaulOptions, options); return $.extend({}, ancestor, { get: function () { var res = ""; if (options.includeTotalcount) { if (res != "") { res = res + "&" } res = res + "$inlinecount=allpages" } if (filter != "") { if (res != "") { res = res + "&" } if (negate === true) { res = res + mvcct.$$.not + " (" + filter + ")" } res = res + filter } if (sorting != "") { if (res != "") { res = res + "&" } res = res + sorting } if (paging != "") { if (res != "") { res = res + "&" } res = res + paging } if (res != "") { res = link + options.connector + res } else { res = link } return res }, execute: function (callBack, errorCallback) { $.ajax({ url: this.get(), contentType: "application/json", dataType: "text", success: function (data, textStatus, jqXHR) { data = $.parseJSON(data); callBack(data, textStatus, jqXHR) }, error: errorCallback }) }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = ""; return this }, resetSorting: function () { sorting = ""; return this }, resetPaging: function () { paging = ""; return this }, setSorting: function (sortString) { sorting = sortString; return this }, setFilter: function (filterString) { filter = filterString; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = options.skip + skip + "&" + options.top + pageSize; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } field = field.replace(".", "/"); if (sorting != "") { sorting = sorting + "," } else { sorting = options.orderby } sorting = sorting + field + " " + (desc ? options.desc : options.asc); return this }, addStringCondition: function (condition, enabled) { if (enabled === false || condition == "") { return this } if (filter != "") { filter = filter + " " + this.filterOperator() + " " } else { filter = options.filter } filter = filter + condition; return this }, addCondition: function (operator, value1, value2, currType, enabled) { if (enabled === false) { return this } value1 = value1.replace(".", "/"); if (!currType) { if (mvcct.utils.isDate(value2)) { currType = 4 } else { if (mvcct.utils.isString(value2)) { currType = 0 } else { currType = 3 } } } if (value2 == null) { value2 = "null" } else { if (currType == 4) { value2 = "datetime'" + mvcct.utils.ISODate(new Date(value2.getTime() - value2.getTimezoneOffset() * 60000), true) + "'" } else { value2 = value2 + ""; if (currType <= 0) { if (mvcct.utils.isGuid(value2)) { value2 = "guid'" + value2 + "'" } else { value2 = "'" + encodeURIComponent(value2) + "'" } } } } if (operator == mvcct.$$.substringof || operator == mvcct.$$.startswith || operator == mvcct.$$.endswith) { this.addStringCondition(operator + "(" + value1 + "," + value2 + ") eq true") } else { if (operator == mvcct.$$.substringofInv) { this.addStringCondition(mvcct.$$.substringof + "(" + value2 + "," + value1 + ") eq true") } else { this.addStringCondition(value1 + " " + operator + " " + value2) } } return this }, open: function (logicalOperator, enabled, negate) { var newOption = $.extend({}, options, { connector: "", filter: "" }); var res = MvcControlsToolkit_SQueryable("", logicalOperator, newOption, negate); res.father = this; return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } var res = this.get(); if (res != "") { res = "(" + res + ")"; this.father.addStringCondition(res, enabled) } return this.father } }) }; mvcct.oDataQueryable.DefaulOptions = { includeTotalcount: true, connector: "?", skip: "$skip=", top: "$top=", orderby: "$orderby=", filter: "$filter=", desc: "desc", asc: "asc" }; mvcct.upshotQueryable = function (dataSource, fop, options, negate) { var filter = []; var sorting = []; var paging = null; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.upshotQueryable.DefaulOptions, options); function getOperator(operator) { switch (operator) { case mvcct.$$.lt: return "<"; case mvcct.$$.le: return "<="; case mvcct.$$.eq: return "=="; case mvcct.$$.ne: return "!="; case mvcct.$$.ge: return ">="; case mvcct.$$.gt: return ">"; case mvcct.$$.startswith: return "StartsWith"; case mvcct.$$.endswith: return "EndsWith"; case mvcct.$$.substringofInv: return "Contains"; default: throw "The operator '" + operator + "' is not supported." } } return $.extend({}, ancestor, { get: function () { var res = ""; if (filter.length > 0) { dataSource.setFilter(filter) } else { dataSource.setFilter(null) } if (sorting.length > 0) { dataSource.setSort(sorting) } else { dataSource.setSort(null) } dataSource.setPaging(paging); return dataSource }, execute: function (callBack) { this.get(); dataSource.refresh() }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = []; return this }, resetSorting: function () { sorting = []; return this }, resetPaging: function () { paging = null; return this }, setSorting: function (sortArray) { sorting = sortArray; return this }, setFilter: function (filterArray) { filter = filterArray; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = { skip: skip, take: pageSize, includeTotalCount: options.includeTotalcount }; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } sorting.push({ property: field, descending: desc }); return this }, addCondition: function (operator, value1, currSearch, currType, enabled) { if (enabled === false) { return this } filter.push({ property: value1, value: currSearch, operator: getOperator(operator) }); return this }, open: function (logicalOperator, enabled, negate) { throw "The method open is not supported."; return res }, close: function (enabled) { throw "The method close is not supported."; return this.father } }) }; mvcct.upshotQueryable.DefaulOptions = { includeTotalcount: true} })(); (function () { property = mvcct.utils.property; propertySet = mvcct.utils.propertySet; function a(d, c, b) { if (d == mvcct.$$.eq) { return function (e) { return property(e, c) == b } } else { if (d == mvcct.$$.gt) { return function (e) { return property(e, c) > b } } else { if (d == mvcct.$$.ge) { return function (e) { return property(e, c) >= b } } else { if (d == mvcct.$$.lt) { return function (e) { return property(e, c) < b } } else { if (d == mvcct.$$.le) { return function (e) { return property(e, c) <= b } } else { if (d == mvcct.$$.ne) { return function (e) { return property(e, c) != b } } else { if (d == mvcct.$$.startswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == 0 } } else { if (d == mvcct.$$.endswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == e.length - b.length } } else { if (d == mvcct.$$.substringof) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return b.indexOf(e) >= 0 } } else { if (d == mvcct.$$.substringofInv) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) >= 0 } } } } } } } } } } } } mvcct.localQueryable = function (i, j, d) { var g = mvcct.Queryable(j, d); var c = []; var f = []; var e = 0; var h = 5; var k = null; function b() { var m; var n = Math.min(e, k.length); var o = Math.min(h, k.length - n); m = []; for (var l = 0; l < k.length; l++) { m.push(k[l]) } if (n > 0) { m.splice(0, n) } if (o == 0) { m = [] } else { if (o < m.length) { m.splice(o, m.length - o) } } return m } return $.extend({}, g, { get: function () { var m = this.getFilter(); var l = this.getSorting(); return function (p) { var n = []; if (m != null) { for (var o = 0; o < p.length; o++) { if (m(p[o])) { n.push(p[o]) } } } else { n = p } if (l == null) { k = n } else { k = n.sort(l) } return b() } }, getFilter: function () { if (c.length == 0) { return null } if (this.filterOperator() == mvcct.$$.and) { if (d) { return function (n) { var m = true; for (var l = 0; l < c.length; l++) { m = m && c[l](n) } return !m } } else { return function (n) { var m = true; for (var l = 0; l < c.length; l++) { m = m && c[l](n) } return m } } } else { if (d) { return function (n) { var m = true; for (var l = 0; l < c.length; l++) { m = m || c[l](n) } return !m } } else { return function (n) { var m = true; for (var l = 0; l < c.length; l++) { m = m || c[l](n) } return m } } } }, getSorting: function () { if (f.length == 0) { return null } return function (m, l) { for (var o = 0; o < f.length; o++) { var n = f[o](m, l); if (n != 0) { return n } } return 0 } }, execute: function (l) { if (k != null) { l(b()) } else { l(this.get()(i)) } }, setState: function (l) { k = null; c = l.f; f = l.s; e = l.ps; h = l.pt }, getState: function () { var l = { f: c, s: f, ps: e, pt: h }; return l }, resetFilter: function () { c = []; k = null; return this }, resetSorting: function () { f = []; k = null; return this }, resetPaging: function () { e = 0; return this }, setSorting: function (l) { k = null; f = l; return this }, setFilter: function (l) { k = null; c = l; return this }, setPaging: function (m, l) { if (l == null || l == "") { l = 1 } e = (m - 1) * l; h = l; return this }, addSort: function (m, n, l) { if (l === false) { return this } k = null; if (n) { f.push(function (o, p) { val1 = property(o, m); val2 = property(p, m); if (val1 < val2) { return 1 } else { if (val2 < val1) { return -1 } else { return 0 } } }) } else { f.push(function (o, p) { val1 = property(o, m); val2 = property(p, m); if (val1 < val2) { return -1 } else { if (val2 < val1) { return 1 } else { return 0 } } }) } return this }, addArrayCondition: function (m, l) { if (l === false || m == null) { return this } k = null; c = c.concat(m); return this }, addCondition: function (n, m, l, o, q) { if (o === false) { return this } var p = a(n, m, l); if (p != null) { c.push(p); k = null } return this }, open: function (l, m, o) { var n = MvcControlsToolkit_CQueryable("", l, o); n.father = this; return n }, close: function (l) { if ((this["father"] || null) == null) { return this } var m = this.getFilter(); if (m != null) { this.father.addCondition(m, l) } return this.father } }) }; mvcct.updatesManager = function (e, f, k, h, l, b, n) { if (!f) { throw "sourceViewModel is not optional" } n = n || {}; var m = null; var j = null; function i() { var u = mvcct.utils.property(f, k); if (!mvcct.utils.isArray(u)) { return } var p = []; var A = []; var x = []; var v = []; var o = []; var r = []; var w = false; for (var t = 0; t < u.length; t++) { var z = ko.utils.unwrapObservable(u[t]); var s = ko.utils.unwrapObservable(z._modified); if (s) { if (mvcct.utils.changed(z)) { x.push(mvcct.utils.updateCopy(z)); o.push(z._tag); w = true } else { z._modified(false) } continue } s = ko.utils.unwrapObservable(z._inserted); if (s) { p.push(mvcct.utils.updateCopy(z)); r.push(z); v.push(z._tag); w = true; continue } s = z._destroy; if (s) { A.push(mvcct.utils.property(z, h)); w = true; continue } } var q = false; var y = {}; y[n.updater.i] = p; y[n.updater.u] = x; y[n.updater.d] = A; if (!b) { if (!l) { q = true } l = y } else { if (!l) { l = {}; q = true; mvcct.utils.propertySet(l, b, y) } else { mvcct.utils.propertySet(l, b, y) } } return { changes: w, i: v, u: o, _justCreated_: q, inserted: r} } function d(r, q) { if (!r) { return } iPrefix = b ? b + "." + n.updater.i : n.updater.i; uPrefix = b ? b + "." + n.updater.u : n.updater.u; for (var p = 0; p < r.length; p++) { if (r[p]["_pocessed"]) { continue } var o = mvcct.utils.changeIndex(iPrefix, k, r[p].name, function (s) { return q.i[s] }); if (!o) { o = mvcct.utils.changeIndex(uPrefix, k, r[p].name, function (s) { return q.u[s] }) } if (o) { r[p]._pocessed = true; r[p].name = o; r[p].id = mvcct.utils.idFromName(o) } } } function c(o, p, q) { if (p) { m = q; return } if (!e) { throw "updateUrl is not optional" } $.ajax({ url: e, contentType: "application/json", data: mvcct.utils.stringify(ko.mapping.toJS(l), n.isoDate, n.noTimelineCorrection), dataType: "text", type: "POST", success: function (s, t, r) { s = $.parseJSON(s); if (!s) { s = { errors: null} } else { if (s.errors && mvcct.utils.isArray(s.errors) && s.errors.length == 0) { s.errors = null } else { if (!s.errors) { s.errors = null } } } q(s, o, r.status) }, error: function (s, t, r) { var u = s.responseText || null; data = u ? $.parseJSON(u) : {}; if (mvcct.utils.isArray(data)) { data = { errors: data} } if (!data.errors) { data.errors = null } if (mvcct.utils.isArray(data.errors) && data.errors.length == 0) { data.errors = null } q(data, o, s.status) } }) } function g(w, x, v) { var r = mvcct.utils.property(f, k); if (!mvcct.utils.isArray(r)) { return } var t = []; for (var s = 0; s < r.length; s++) { if (!r[s]["_destroy"]) { w.accepted(r[s]); t.push(r[s]) } } if (x && x.insertedKeys) { for (var s = 0; s < x.insertedKeys.length; s++) { var u = x.insertedKeys[s]; if (!b || b == u.destinationExpression) { var q = u.keys; if (q && q.length) { q = ko.utils.unwrapObservable(ko.mapping.fromJS(q)); var p = v.inserted; for (var o = 0; o < q.length; o++) { propertySet(p[s], h, q[o]) } } break } } } mvcct.utils.propertySet(f, k, t) } n = $.extend({}, { updater: { u: "Modified", i: "Inserted", d: "Deleted" }, updateCallback: function (q, o, p) { }, updatingCallback: function (p, o, q) { return p } }, n); return { prepare: function (t, o, r, q) { if (!t) { return } t = ko.utils.unwrapObservable(t); if (!mvcct.utils.isArray(t)) { t = [t] } for (var p = 0; p < t.length; p++) { var s = t[p]; if (!s._inserted) { s._inserted = ko.observable(false) } if (!s._modified) { s._modified = ko.observable(false) } if (o) { mvcct.utils.Track(s, r, q) } } }, refreshErrors: function (q, o) { if (!o) { o = j } var r = []; if (o && o.errors) { r = o.errors } q.find(".input-validation-error").removeClass("input-validation-error"); q.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid"); var p = q.find("[data-valmsg-summary=true]"); list = p.find("ul"); list.empty(); if (r.length > 0) { $.each(r, function (t, s) { $.each(s.errors, function (u, v) { $("<li />").html(v).appendTo(list) }) }); p.addClass("validation-summary-errors").removeClass("validation-summary-valid"); MvcControlsToolkit_ServerErrors(r); setTimeout(function () { q.find("span.input-validation-error[data-element-type]").removeClass("input-validation-error") }, 0) } else { p.addClass("validation-summary-valid").removeClass("validation-summary-errors") } }, clearErrors: function (o) { this.refreshErrors(o, { errors: null }) }, modified: function (t, p, r, s, q) { var o = ko.utils.unwrapObservable(t); if ((!ko.utils.unwrapObservable(o._inserted)) && (!o._destroy)) { if (r) { o._modified(mvcct.utils.changed(t)) } else { if (p) { o._modified(true); mvcct.utils.Track(t, s, q) } else { o._modified(true) } } } }, inserted: function (q, p) { var o = ko.utils.unwrapObservable(p); q.push(p); o._inserted(true) }, deleted: function (q, p) { var o = ko.utils.unwrapObservable(p); if (ko.utils.unwrapObservable(o._inserted)) { q.remove(o) } else { q.destroy(o); o._modified(false) } }, accepted: function (p) { var o = ko.utils.unwrapObservable(p); o._destroy = false; o._inserted(false); o._modified(false); mvcct.utils.accept(p) }, newResult: function (o, p) { if (m) { m(o, this, p) } m = null }, reset: function (o) { if (ko.utils.unwrapObservable(o._modified)) { mvcct.utils.undo(o); o._modified(false) } else { if (ko.utils.unwrapObservable(o._inserted)) { var p = mvcct.utils.property(f, k, true); p.remove(o) } } }, addRelated: function (z, y, s, A, B) { var v = mvcct.utils.property(f, k); if (!v) { return } B = B || h; y = ko.utils.unwrapObservable(y); if (!mvcct.utils.isArray(y)) { y = [y] } var r = {}; for (var w = 0; w < y.length; w++) { var p = mvcct.utils.property(y[w], s); var o = r[p]; if (o) { o.push(y[w]) } else { r[p] = [y[w]] } } for (var w = 0; w < v.length; w++) { var C = r[mvcct.utils.property(v[w], B)]; var x = mvcct.utils.property(v[w], z, true); if (C) { if (ko.isObservable(x)) { var q = ko.utils.unwrapObservable(x); q.push.apply(q, C); x(q) } else { if (x && mvcct.utils.isArray(x)) { x.push.apply(x, C) } else { mvcct.utils.propertySet(v[w], z, ko.observableArray(C)) } } if (A) { for (var t = 0; t < C.length; t++) { var u = mvcct.utils.property(C[t], A, true); if (ko.isObservable(u)) { u.push(v[w]) } else { if (u && mvcct.utils.isArray(u)) { u.push(v[w]) } else { mvcct.utils.propertySet(C[t], A, ko.observableArray([v[w]])) } } } } } else { if (!x) { mvcct.utils.propertySet(v[w], z, ko.observableArray([])) } } } }, resetAll: function (q) { var r = mvcct.utils.property(f, k); var p = []; for (var o = 0; o < r.length; o++) { var s = r[o]; if (ko.utils.unwrapObservable(s._inserted)) { continue } else { if (s._destroy) { s._destroy = false } else { if (ko.utils.unwrapObservable(s._modified)) { mvcct.utils.undo(s); s._modified(false) } } } p.push(s) } j = null; mvcct.utils.propertySet(f, k, p); this.refreshErrors(q) }, submit: function (o, q) { var p = i(); if (!n.updatingCallback(p.changes, l, b)) { return } if (!q) { if ((!o) || o.length == 0) { o = $("#_DynamicJSonFormtoSubmit_"); if (o.length == 0) { if (!e) { throw "updateUrl is not optional" } $("body").first().prepend("<form id='_DynamicJSonFormtoSubmit_' action='" + e + "' method='post'><input type='hidden' name='display.$$' value='MVCControlsToolkit.Controls.Bindings.JSONAdapter' /><input type='hidden' name='$.JSonModel' value='' class='JSonModeltoSubmit' /></form>"); o = $("#_DynamicJSonFormtoSubmit_"); o.find(".JSonModeltoSubmit").val(mvcct.utils.stringify(ko.mapping.toJS(l), n.isoDate)) } } o.submit() } }, update: function (p, r, o) { var q = i(); if (!n.updatingCallback(q.changes, l, b)) { return } c(this, r, function (s, u, t) { if (s.errors) { d(s.errors, q) } var w = { setErrors: true, model: f, expression: k, key: h, success: !s.errors }; n.updateCallback(w, s, t); j = s; if (!s.errors) { g(u, s, q) } if (w.setErrors) { u.refreshErrors(p, s) } if (o) { if (!mvcct.utils.isArray(o)) { o = [o] } for (var v = 0; v < o.length; v++) { o[v].newResult(s, t) } } }) } } } })();





  